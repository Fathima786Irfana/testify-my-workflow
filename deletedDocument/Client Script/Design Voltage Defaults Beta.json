{"name":"c1ed9a62a7","creation":"2024-11-20 08:20:33.962723","modified":"2024-11-20 08:20:33.962723","modified_by":"deploymentmaster@lmnas.com","owner":"deploymentmaster@lmnas.com","docstatus":0,"idx":0,"deleted_name":"Design Voltage Defaults Beta","deleted_doctype":"Client Script","restored":0,"new_name":null,"data":"{\n \"creation\": \"2024-11-20 08:20:22.425525\",\n \"docstatus\": 0,\n \"doctype\": \"Client Script\",\n \"dt\": \"Design\",\n \"enabled\": 1,\n \"idx\": 0,\n \"modified\": \"2024-11-20 08:20:22.425525\",\n \"modified_by\": \"deploymentmaster@lmnas.com\",\n \"module\": null,\n \"name\": \"Design Voltage Defaults Beta\",\n \"owner\": \"deploymentmaster@lmnas.com\",\n \"script\": \"//Setting the default dependent value for either HV Rated Voltage\\n// or HV1  #(Story: US-2024-0044)\\n//the LV Rated Voltage should have same logic has HV Rated Voltage\\nfrappe.ui.form.on(\\\"Design\\\", {\\n  refresh(frm) {\\n    var lDoctype = \\\"Gitra Settings\\\";\\n\\n    // Fetch Gitra Settings document asynchronously\\n    frappe.model.with_doc(lDoctype, lDoctype, function () {\\n      // Get list of documents for Gitra Settings\\n      var laValues = frappe.model.get_list(lDoctype);\\n      // Initialize LV settings\\n      const LA_LV_UNIQUEARRAY = laValues[0].lv_voltage_setting.reduce(\\n        (iAccumulator, iCurrent) => {\\n          // Reduce function to filter unique LV voltage values\\n          if (iCurrent.transformer_type === frm.doc.transformer_type) {\\n            if (!iAccumulator.includes(iCurrent.um)) {\\n              iAccumulator.push(iCurrent.um);\\n            }\\n          }\\n          return iAccumulator;\\n        },\\n        []\\n      );\\n      set_field_options(\\\"highest_operation_voltage_lv\\\", LA_LV_UNIQUEARRAY);\\n      frm.events.highest_operation_voltage_lv(frm);\\n      frm.events.ac_phase_lv(frm);\\n\\n      //   Initialize HV settings\\n      frm.events.fnSetOptions(\\n        frm,\\n        \\\"voltage_to\\\",\\n        \\\"hv_rated_voltage\\\",\\n        \\\"um\\\",\\n        \\\"highest_operation_voltage_hv\\\",\\n        false,\\n        \\\"hv\\\"\\n      );\\n      frm.events.fnSetOptions(\\n        frm,\\n        \\\"um\\\",\\n        \\\"highest_operation_voltage_hv\\\",\\n        \\\"ac_phase\\\",\\n        \\\"ac_phase_hv\\\",\\n        false,\\n        \\\"hv\\\"\\n      );\\n      frm.events.fnSetOptions(\\n        frm,\\n        \\\"ac_phase\\\",\\n        \\\"ac_phase_hv\\\",\\n        \\\"li\\\",\\n        \\\"li_phase_hv\\\",\\n        false,\\n        \\\"hv\\\"\\n      );\\n\\n      // Set defaults if new document\\n      if (frm.is_new()) {\\n        fnSetLvDefaults(frm, laValues[0]);\\n        fnSetHvDefaults(frm, laValues[0]);\\n      }\\n      frm.refresh_fields();\\n    });\\n  },\\n\\n  // Generic function to set options for LV and HV settings\\n  fnSetOptions(\\n    frm,\\n    iOnSettingsField,\\n    iOnField,\\n    iToSettingsField,\\n    iToField,\\n    iOnChange,\\n    type\\n  ) {\\n    const DOCTYPE = \\\"Gitra Settings\\\";\\n\\n    // Determine the settings field based on type (hv or lv)\\n    const GITRA_SETTING =\\n      type === \\\"hv\\\" ? \\\"hv_voltage_setting\\\" : \\\"lv_voltage_setting\\\";\\n\\n    // Load the document for Gitra Settings\\n    frappe.model.with_doc(DOCTYPE, DOCTYPE, function () {\\n      // Get the list of settings\\n      const LA_VALUE = frappe.model.get_list(DOCTYPE);\\n      //initializing set to avoid duplicate option\\n      const LA_OPTIONS = new Set();\\n\\n      // Loop through the settings\\n      LA_VALUE[0][GITRA_SETTING].forEach((ldRow) => {\\n        // Match the transformer type and compare the OnSettings field value\\n        if (ldRow.transformer_type === frm.doc.transformer_type) {\\n          if (ldRow[iOnSettingsField] >= frm.doc[iOnField]) {\\n            LA_OPTIONS.add(ldRow[iToSettingsField]); // Add the valid options\\n          }\\n        }\\n      });\\n\\n      // Convert Set to Array and set field options\\n      const LA_OPTIONS_ARRAY = Array.from(LA_OPTIONS);\\n      set_field_options(iToField, LA_OPTIONS_ARRAY);\\n\\n      // Automatically set the first option \\n      // if onChange is true and options are available\\n      if (iOnChange && LA_OPTIONS_ARRAY.length > 0) {\\n        frm.set_value(iToField, LA_OPTIONS_ARRAY[0]);\\n      }\\n\\n      // Refresh the form fields after setting the options\\n      frm.refresh_fields();\\n    });\\n  },\\n\\n  // Combined function to set defaults for both LV and HV\\n  fnSetDefaults(frm, iField, type) {\\n    const OPERATION_VOLTAGE =\\n      type === \\\"hv\\\"\\n        ? \\\"highest_operation_voltage_hv\\\"\\n        : \\\"highest_operation_voltage_lv\\\";\\n    const AC_PHASE = type === \\\"hv\\\" ? \\\"ac_phase_hv\\\" : \\\"ac_phase_lv\\\";\\n    const LI_PHASE = type === \\\"hv\\\" ? \\\"li_phase_hv\\\" : \\\"li_phase_lv\\\";\\n\\n    frm.events.fnSetOptions(\\n      frm,\\n      \\\"voltage_to\\\",\\n      iField,\\n      \\\"um\\\",\\n      OPERATION_VOLTAGE,\\n      true,\\n      type\\n    );\\n    frm.events.fnSetOptions(\\n      frm,\\n      \\\"um\\\",\\n      OPERATION_VOLTAGE,\\n      \\\"ac_phase\\\",\\n      AC_PHASE,\\n      true,\\n      type\\n    );\\n    frm.events.fnSetOptions(\\n      frm,\\n      \\\"ac_phase\\\",\\n      AC_PHASE,\\n      \\\"li\\\",\\n      LI_PHASE,\\n      true,\\n      type\\n    );\\n  },\\n\\n  // Function to handle change in HV rated voltage field\\n  hv_rated_voltage(frm) {\\n    if (!frm.doc.hv_rated_voltage) return;\\n    frm.events.fnSetDefaults(frm, \\\"hv_rated_voltage\\\", \\\"hv\\\");\\n  },\\n\\n  // Function to handle change in HV1 field\\n  hv1(frm) {\\n    if (!frm.doc.hv1) return;\\n    frm.events.fnSetDefaults(frm, \\\"hv1\\\", \\\"hv\\\");\\n  },\\n  //onchange of lv_rated_voltage\\n  lv_rated_voltage(frm) {\\n    if (!frm.doc.lv_rated_voltage) return;\\n    frm.events.fnSetDefaults(frm, \\\"lv_rated_voltage\\\", \\\"lv\\\");\\n  },\\n  //onchange of lv1\\n  lv1(frm) {\\n    if (!frm.doc.lv1) return;\\n    frm.events.fnSetDefaults(frm, \\\"lv1\\\", \\\"lv\\\");\\n  },\\n\\n  // Function to handle change in highest operation voltage HV field\\n  highest_operation_voltage_hv(frm) {\\n    if (!frm.doc.highest_operation_voltage_hv) return;\\n    frm.events.fnSetOptions(\\n      frm,\\n      \\\"um\\\",\\n      \\\"highest_operation_voltage_hv\\\",\\n      \\\"ac_phase\\\",\\n      \\\"ac_phase_hv\\\",\\n      true,\\n      \\\"hv\\\"\\n    );\\n  },\\n\\n  // Function to handle change in AC phase HV field\\n  ac_phase_hv(frm) {\\n    if (!frm.doc.ac_phase_hv) return;\\n    frm.events.fnSetOptions(\\n      frm,\\n      \\\"ac_phase\\\",\\n      \\\"ac_phase_hv\\\",\\n      \\\"li\\\",\\n      \\\"li_phase_hv\\\",\\n      true,\\n      \\\"hv\\\"\\n    );\\n  },\\n\\n  // Function to handle change in highest operation voltage LV field\\n  highest_operation_voltage_lv(frm) {\\n    // Local variable for the Gitra Settings doctype\\n    var lDoctype = \\\"Gitra Settings\\\";\\n\\n    // Fetch Gitra Settings document asynchronously\\n    frappe.model.with_doc(lDoctype, lDoctype, function () {\\n      // Get list of documents for Gitra Settings\\n      const LA_VALUES = frappe.model.get_list(lDoctype);\\n\\n      const LA_UNIQUEARRAY = LA_VALUES[0].lv_voltage_setting.reduce(\\n        (iAccumulator, iCurrent) => {\\n          if (\\n            iCurrent.um &&\\n            frm.doc.highest_operation_voltage_lv &&\\n            iCurrent.um.toString() ===\\n              frm.doc.highest_operation_voltage_lv.toString() &&\\n            !iAccumulator.includes(iCurrent.ac_phase) &&\\n            iCurrent.transformer_type === frm.doc.transformer_type\\n          ) {\\n            iAccumulator.push(iCurrent.ac_phase);\\n          }\\n          return iAccumulator;\\n        },\\n        []\\n      );\\n      set_field_options(\\\"ac_phase_lv\\\", LA_UNIQUEARRAY);\\n    });\\n  },\\n\\n  // Function to handle change in AC phase LV field\\n  ac_phase_lv(frm) {\\n    // Local variable for the Gitra Settings doctype\\n    var lDoctype = \\\"Gitra Settings\\\";\\n\\n    // Fetch Gitra Settings document asynchronously\\n    frappe.model.with_doc(lDoctype, lDoctype, function () {\\n      // Get list of documents for Gitra Settings\\n      const LA_VALUES = frappe.model.get_list(lDoctype);\\n\\n      const LA_UNIQUEARRAY = LA_VALUES[0].lv_voltage_setting.reduce(\\n        (iAccumulator, iCurrent) => {\\n          if (\\n            iCurrent.um &&\\n            frm.doc.highest_operation_voltage_lv &&\\n            iCurrent.ac_phase &&\\n            frm.doc.ac_phase_lv &&\\n            iCurrent.um.toString() ===\\n              frm.doc.highest_operation_voltage_lv.toString() &&\\n            iCurrent.ac_phase.toString() === frm.doc.ac_phase_lv.toString() &&\\n            !iAccumulator.includes(iCurrent.li) &&\\n            iCurrent.transformer_type === frm.doc.transformer_type\\n          ) {\\n            iAccumulator.push(iCurrent.li);\\n          }\\n          return iAccumulator;\\n        },\\n        []\\n      );\\n\\n      set_field_options(\\\"li_phase_lv\\\", LA_UNIQUEARRAY);\\n    });\\n  },\\n\\n  transformer_type(frm) {\\n    var lDoctype = \\\"Gitra Settings\\\";\\n\\n    // Fetch Gitra Settings document asynchronously\\n    frappe.model.with_doc(lDoctype, lDoctype, function () {\\n      // Get list of documents for Gitra Settings\\n      var laValues = frappe.model.get_list(lDoctype);\\n      const LA_LV_UNIQUEARRAY = laValues[0].lv_voltage_setting.reduce(\\n        (iAccumulator, iCurrent) => {\\n          // Reduce function to filter unique LV voltage values\\n          if (iCurrent.transformer_type === frm.doc.transformer_type) {\\n            if (!iAccumulator.includes(iCurrent.um)) {\\n              iAccumulator.push(iCurrent.um);\\n            }\\n          }\\n          return iAccumulator;\\n        },\\n        []\\n      );\\n      set_field_options(\\\"highest_operation_voltage_lv\\\", LA_LV_UNIQUEARRAY);\\n      if (!frm.doc.lv_rated_voltage && !frm.doc.lv_2) {\\n        fnSetLvDefaults(frm, laValues[0]);\\n      }\\n      fnSetHvDefaults(frm, laValues[0]);\\n    });\\n  },\\n});\\n\\n// Function to set LV defaults based on selected settings\\nfunction fnSetLvDefaults(frm, iSettings) {\\n  var ldLvDefaults = iSettings.lv_voltage_setting.find(\\n    (ldX) =>\\n      ldX.is_default === 1 && ldX.transformer_type === frm.doc.transformer_type\\n  );\\n  if (ldLvDefaults) {\\n    frm.set_value(\\\"highest_operation_voltage_lv\\\", ldLvDefaults.um);\\n    frm.set_value(\\\"ac_phase_lv\\\", ldLvDefaults.ac_phase);\\n    frm.set_value(\\\"li_phase_lv\\\", ldLvDefaults.li);\\n  } else {\\n    frm.set_value(\\\"highest_operation_voltage_lv\\\", \\\"\\\");\\n    frm.set_value(\\\"ac_phase_lv\\\", \\\"\\\");\\n    frm.set_value(\\\"li_phase_lv\\\", \\\"\\\");\\n  }\\n}\\n\\n// Function to set HV defaults based on selected settings\\nfunction fnSetHvDefaults(frm, iSettings) {\\n  var ldHvDefaults = iSettings.hv_voltage_setting.find(\\n    (ldX) =>\\n      ldX.is_default === 1 && ldX.transformer_type === frm.doc.transformer_type\\n  );\\n  if (ldHvDefaults) {\\n    frm.set_value(\\\"hv_rated_voltage\\\", ldHvDefaults.voltage_to);\\n    frm.set_value(\\\"highest_operation_voltage_hv\\\", ldHvDefaults.um);\\n    frm.set_value(\\\"ac_phase_hv\\\", ldHvDefaults.ac_phase);\\n    frm.set_value(\\\"li_phase_hv\\\", ldHvDefaults.li);\\n  }\\n}\\n\",\n \"view\": \"Form\"\n}","_user_tags":null,"_comments":null,"_assign":null,"_liked_by":null}