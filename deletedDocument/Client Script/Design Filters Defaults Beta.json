{"name":"cca5563b84","creation":"2024-11-20 08:03:19.715888","modified":"2024-11-20 08:03:19.715888","modified_by":"deploymentmaster@lmnas.com","owner":"deploymentmaster@lmnas.com","docstatus":0,"idx":0,"deleted_name":"Design Filters Defaults Beta","deleted_doctype":"Client Script","restored":0,"new_name":null,"data":"{\n \"creation\": \"2024-11-20 08:03:09.948050\",\n \"docstatus\": 0,\n \"doctype\": \"Client Script\",\n \"dt\": \"Design\",\n \"enabled\": 1,\n \"idx\": 0,\n \"modified\": \"2024-11-20 08:03:09.948050\",\n \"modified_by\": \"deploymentmaster@lmnas.com\",\n \"module\": null,\n \"name\": \"Design Filters Defaults Beta\",\n \"owner\": \"deploymentmaster@lmnas.com\",\n \"script\": \"frappe.ui.form.on(\\\"Design\\\", {\\n    /*\\n     * This function validates the min and max values of the given input\\n     * The min and max values are defined in the Gitra settings for a field\\n     * @params {Object} frm - The form object\\n     * @params {string} attribute_label - The field label\\n     * as defined in the Gitra Settings\\n     * @params {string} attribute_name - The field name in\\n     * the current design for validation\\n     * @params {string} transformer_type - The type of transformer\\n     * for which the range is validated\\n     */\\n    fnValidateAttributeRange(\\n      frm,\\n      iAttributeLabel,\\n      iAttributeName,\\n      iTransformerType\\n    ) {\\n      const DOCTYPE = \\\"Gitra Settings\\\";\\n      // Initialize the model with doctype Gitra Settings\\n      frappe.model.with_doc(DOCTYPE, DOCTYPE, function () {\\n        // Then from the model get the list. This will\\n        // return all attributes of the model including child table\\n        let ldDoc = frappe.model.get_list(DOCTYPE);\\n        // Find the specific attribute based on the attribute_label\\n        //and transformer_type\\n        let ldAttribute = ldDoc[0].attributes.find(\\n          (attr) =>\\n            attr.parameter === iAttributeLabel &&\\n            attr.transformer_type === iTransformerType\\n        );\\n  \\n        if (ldAttribute) {\\n          // Ensure all values are numeric for accurate comparison\\n          let lAttributeName = parseFloat(frm.doc[iAttributeName]);\\n          let lMinValue = parseFloat(ldAttribute.min);\\n          let lMaxValue = parseFloat(ldAttribute.max);\\n  \\n          if (lAttributeName < lMinValue || lAttributeName > lMaxValue) {\\n            // Check if the attribute value is within the\\n            //specified range and display an error message if it is not.\\n            frappe.msgprint({\\n              title: __(\\\"Validation Error\\\"),\\n              message: __(\\n                \\\"Attribute Not in Range\\\" +\\n                  \\\", Min: \\\" +\\n                  lMinValue +\\n                  \\\", Max: \\\" +\\n                  lMaxValue\\n              ),\\n              indicator: \\\"red\\\",\\n            });\\n            frappe.validated = false;\\n          }\\n        }\\n  \\n        //If ldAttribute has a default value,\\n        //set it to the field\\n        if (ldAttribute && ldAttribute.default) {\\n          frm.set_value(iAttributeName, ldAttribute.default);\\n        }\\n      });\\n    },\\n  \\n    //onchange of rating field event\\n    rating(frm) {\\n      frm.events.fnValidateAttributeRange(\\n        frm,\\n        \\\"Rating\\\",\\n        \\\"rating\\\",\\n        frm.doc.transformer_type\\n      );\\n    },\\n  \\n    //onchange of hv_rated_voltage field event\\n    hv_rated_voltage(frm) {\\n      frm.events.fnValidateAttributeRange(\\n        frm,\\n        \\\"HV Rated Voltage\\\",\\n        \\\"hv_rated_voltage\\\",\\n        frm.doc.transformer_type\\n      );\\n    },\\n  \\n    //onchange of hv1 field event\\n    hv1(frm) {\\n      frm.events.fnValidateAttributeRange(\\n        frm,\\n        \\\"HV1\\\",\\n        \\\"hv1\\\",\\n        frm.doc.transformer_type\\n      );\\n    },\\n  \\n    //onchange of hv2 field event\\n    hv2(frm) {\\n      frm.events.fnValidateAttributeRange(\\n        frm,\\n        \\\"HV2\\\",\\n        \\\"hv2\\\",\\n        frm.doc.transformer_type\\n      );\\n    },\\n  \\n    //onchange of impedance field event\\n    impedance(frm) {\\n      frm.events.fnValidateAttributeRange(\\n        frm,\\n        \\\"Impedance\\\",\\n        \\\"impedance\\\",\\n        frm.doc.transformer_type\\n      );\\n    },\\n  \\n    //onchange of lv_rated_voltage field event\\n    lv_rated_voltage(frm) {\\n      frm.events.fnValidateAttributeRange(\\n        frm,\\n        \\\"LV Rated Voltage\\\",\\n        \\\"lv_rated_voltage\\\",\\n        frm.doc.transformer_type\\n      );\\n    },\\n  \\n    //onchange of lv1 field event\\n    lv1(frm) {\\n      frm.events.fnValidateAttributeRange(\\n        frm,\\n        \\\"LV1\\\",\\n        \\\"lv1\\\",\\n        frm.doc.transformer_type\\n      );\\n    },\\n  \\n    //onchange of lv_2 field event\\n    lv_2(frm) {\\n      frm.events.fnValidateAttributeRange(\\n        frm,\\n        \\\"LV2\\\",\\n        \\\"lv_2\\\",\\n        frm.doc.transformer_type\\n      );\\n    },\\n  \\n    //onchange of power_lv1 field event\\n    power_lv1(frm) {\\n      frm.events.fnValidateAttributeRange(\\n        frm,\\n        \\\"Rating LV1\\\",\\n        \\\"power_lv1\\\",\\n        frm.doc.transformer_type\\n      );\\n    },\\n  \\n    //onchange of power_lv2 field event\\n    power_lv2(frm) {\\n      frm.events.fnValidateAttributeRange(\\n        frm,\\n        \\\"Rating LV2\\\",\\n        \\\"power_lv2\\\",\\n        frm.doc.transformer_type\\n      );\\n    },\\n  \\n    //onchange of uk_lv1 field event\\n    uk_lv1(frm) {\\n      frm.events.fnValidateAttributeRange(\\n        frm,\\n        \\\"Uk LV1\\\",\\n        \\\"uk_lv1\\\",\\n        frm.doc.transformer_type\\n      );\\n    },\\n  \\n    //onchange of uk_lv2 field event\\n    uk_lv2(frm) {\\n      frm.events.fnValidateAttributeRange(\\n        frm,\\n        \\\"Uk LV2\\\",\\n        \\\"uk_lv2\\\",\\n        frm.doc.transformer_type\\n      );\\n    },\\n  \\n    //onchange of ukhv_lv1 field event\\n    ukhv_lv1(frm) {\\n      frm.events.fnValidateAttributeRange(\\n        frm,\\n        \\\"Uk HV LV 1\\\",\\n        \\\"ukhv_lv1\\\",\\n        frm.doc.transformer_type\\n      );\\n    },\\n  \\n    //onchange of ukhv_lv2 field event\\n    ukhv_lv2(frm) {\\n      frm.events.fnValidateAttributeRange(\\n        frm,\\n        \\\"Uk HV LV 2\\\",\\n        \\\"ukhv_lv2\\\",\\n        frm.doc.transformer_type\\n      );\\n    },\\n  \\n    //onchange of tapping_plus_step field event\\n    tapping_plus_step(frm) {\\n      frm.events.fnValidateAttributeRange(\\n        frm,\\n        \\\"Tapping Plus Step\\\",\\n        \\\"tapping_plus_step\\\",\\n        frm.doc.transformer_type\\n      );\\n      frm.set_value(\\\"tapping_minus_step\\\", frm.doc.tapping_plus_step);\\n    },\\n  \\n    //onchange of transformer type field\\n    transformer_type(frm) {\\n      frm.events.fnValidateAttributeRange(\\n        frm,\\n        \\\"Reference Temperature(\\u00b0C)\\\",\\n        \\\"reference_temperature\\\",\\n        frm.doc.transformer_type\\n      );\\n    },\\n  \\n    //commented this because this field will\\n    //take value from tapping_plus_step\\n    // //onchange of tapping_minus_step field event\\n    // tapping_minus_step(frm) {\\n    //     frm.events.fnValidateAttributeRange(frm, 'Tapping Minus Step', 'tapping_minus_step',frm.doc.transformer_type, false);\\n    // },\\n    validate(frm) {\\n      frm.events.fnValidateAttributeRange(\\n        frm,\\n        \\\"Rating\\\",\\n        \\\"rating\\\",\\n        frm.doc.transformer_type\\n      );\\n  \\n      //HV Validation\\n      if (frm.doc.hv1 && frm.doc.hv2) {\\n        frm.events.fnValidateAttributeRange(\\n          frm,\\n          \\\"HV1\\\",\\n          \\\"hv1\\\",\\n          frm.doc.transformer_type\\n        );\\n        frm.events.fnValidateAttributeRange(\\n          frm,\\n          \\\"HV2\\\",\\n          \\\"hv2\\\",\\n          frm.doc.transformer_type\\n        );\\n      } else {\\n        frm.events.fnValidateAttributeRange(\\n          frm,\\n          \\\"HV Rated Voltage\\\",\\n          \\\"hv_rated_voltage\\\",\\n          frm.doc.transformer_type\\n        );\\n      }\\n  \\n      //LV Valodation\\n      if (frm.doc.lv1 && frm.doc.lv_2) {\\n        frm.events.fnValidateAttributeRange(\\n          frm,\\n          \\\"LV1\\\",\\n          \\\"lv1\\\",\\n          frm.doc.transformer_type\\n        );\\n        frm.events.fnValidateAttributeRange(\\n          frm,\\n          \\\"LV2\\\",\\n          \\\"lv_2\\\",\\n          frm.doc.transformer_type\\n        );\\n      } else {\\n        frm.events.fnValidateAttributeRange(\\n          frm,\\n          \\\"LV Rated Voltage\\\",\\n          \\\"lv_rated_voltage\\\",\\n          frm.doc.transformer_type\\n        );\\n      }\\n  \\n      //Rating Validation\\n      if (frm.doc.power_lv1 && frm.doc.power_lv2) {\\n        frm.events.fnValidateAttributeRange(\\n          frm,\\n          \\\"Rating LV1\\\",\\n          \\\"power_lv1\\\",\\n          frm.doc.transformer_type\\n        );\\n        frm.events.fnValidateAttributeRange(\\n          frm,\\n          \\\"Rating LV2\\\",\\n          \\\"power_lv2\\\",\\n          frm.doc.transformer_type\\n        );\\n      }\\n  \\n      //UK LV Validation\\n      if (frm.doc.uk_lv1 && frm.doc.uk_lv2) {\\n        frm.events.fnValidateAttributeRange(\\n          frm,\\n          \\\"Uk LV1\\\",\\n          \\\"uk_lv1\\\",\\n          frm.doc.transformer_type\\n        );\\n        frm.events.fnValidateAttributeRange(\\n          frm,\\n          \\\"Uk LV2\\\",\\n          \\\"uk_lv2\\\",\\n          frm.doc.transformer_type\\n        );\\n      }\\n  \\n      //UK HV LV Validation\\n      if (frm.doc.ukhv_lv1 && frm.doc.ukhv_lv2) {\\n        frm.events.fnValidateAttributeRange(\\n          frm,\\n          \\\"Uk HV LV 1\\\",\\n          \\\"ukhv_lv1\\\",\\n          frm.doc.transformer_type\\n        );\\n        frm.events.fnValidateAttributeRange(\\n          frm,\\n          \\\"Uk HV LV 2\\\",\\n          \\\"ukhv_lv2\\\",\\n          frm.doc.transformer_type\\n        );\\n      }\\n    },\\n  });\\n  \",\n \"view\": \"Form\"\n}","_user_tags":null,"_comments":null,"_assign":null,"_liked_by":null}