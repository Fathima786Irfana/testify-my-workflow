{"name":"b021568589","creation":"2024-11-20 11:41:46.693373","modified":"2024-11-20 11:41:46.693373","modified_by":"deploymentmaster@lmnas.com","owner":"deploymentmaster@lmnas.com","docstatus":0,"idx":0,"deleted_name":"Transformer Type Based On Factory Beta","deleted_doctype":"Client Script","restored":0,"new_name":null,"data":"{\n \"creation\": \"2024-11-20 11:41:38.345349\",\n \"docstatus\": 0,\n \"doctype\": \"Client Script\",\n \"dt\": \"Design\",\n \"enabled\": 1,\n \"idx\": 0,\n \"modified\": \"2024-11-20 11:41:38.345349\",\n \"modified_by\": \"deploymentmaster@lmnas.com\",\n \"module\": null,\n \"name\": \"Transformer Type Based On Factory Beta\",\n \"owner\": \"deploymentmaster@lmnas.com\",\n \"script\": \"frappe.ui.form.on(\\\"Design\\\", {\\n  onload(frm) {\\n    // For backward compatibility:\\n    // Designs created before adding the factory option.\\n    // If the status is 'Calculation Received', set:\\n    // Factory: 'SGBCZ'\\n    // Transformer Type: 'DTTHZ2N'\\n\\n    if (!frm.is_new()) {\\n      if (\\n        frm.doc.status === \\\"Calculation Received\\\" &&\\n        (!frm.doc.factory || !frm.doc.transformer_type)\\n      ) {\\n        //   frm.set_value('factory', 'SGBCZ');\\n        //   frm.set_value('transformer_type', 'DTTHZ2N');\\n        //   frm.set_value('is_design', 1);\\n        //   if(frm.doc.item){\\n        //       frm.set_value('status', 'Item Created');\\n        //   }\\n        //   frm.save();\\n        fnUpdateButtonGroup(frm);\\n      }\\n    }\\n  },\\n\\n  factory(frm) {\\n    //design creation is only for sgbcz transformer to\\n    //restrict it in other region by hidding the is_design checkbox\\n\\n    if (frm.doc.factory != \\\"SGBCZ\\\") {\\n      frm.set_value(\\\"is_design\\\", 0);\\n      frm.set_df_property(\\\"is_design\\\", \\\"hidden\\\", 1);\\n    } else {\\n      frm.set_df_property(\\\"is_design\\\", \\\"hidden\\\", 0);\\n    }\\n    fnFetchTransformerType(frm);\\n    fnDirectMaterial(frm);\\n    fnUpdateButtonGroup(frm);\\n  },\\n\\n  refresh(frm) {\\n    //design creation is only for sgbcz transformer to\\n    //restrict it in other region by hidding the is_design checkbox\\n\\n    if (frm.doc.factory != \\\"SGBCZ\\\") {\\n      frm.set_df_property(\\\"is_design\\\", \\\"hidden\\\", 1);\\n    } else {\\n      frm.set_df_property(\\\"is_design\\\", \\\"hidden\\\", 0);\\n    }\\n    fnFetchTransformerType(frm);\\n    fnUpdateButtonGroup(frm);\\n    if (frm.is_new()) {\\n      fnDirectMaterial(frm);\\n    }\\n  },\\n\\n  //when is_design checkbox is enabled\\n  //display only create design button\\n  is_design(frm) {\\n    // Update button whenever the checkbox is enabled\\n    fnUpdateButtonGroup(frm);\\n    fnDirectMaterial(frm);\\n    fnXMLDataTab(frm);\\n  },\\n\\n  status(frm) {\\n    // Update button whenever the status field changes\\n    fnUpdateButtonGroup(frm);\\n    fnDirectMaterial(frm);\\n  },\\n\\n  // If the user removes the value in the item field,\\n  // the status will be changed based on whether the\\n  //item was created from design (with gitra calculation)\\n  // or without gitra calculation.\\n\\n  item(frm) {\\n    if (!frm.doc.item && frm.doc.status === \\\"Item Created\\\") {\\n      if (frm.doc.is_design === 1) {\\n        frm.set_value(\\\"status\\\", \\\"Calculation Received\\\");\\n        frm.save().then(function () {\\n          fnUpdateButtonGroup(frm);\\n        });\\n      } else {\\n        frm.set_value(\\\"status\\\", \\\"Draft\\\");\\n        frm.save().then(function () {\\n          fnUpdateButtonGroup(frm);\\n        });\\n      }\\n    }\\n  },\\n});\\n\\nfunction fnXMLDataTab(frm) {\\n  //restrict XML Data tab for other region except SGBCZ\\n\\n  var lXmlDataTab = document.getElementById(\\\"design-xml_data_tab-tab\\\");\\n\\n  if (frm.doc.factory === \\\"SGBCZ\\\" && frm.doc.is_design) {\\n    lXmlDataTab.hidden = false;\\n  } else {\\n    lXmlDataTab.hidden = true;\\n    frm.doc.gitra_xml = \\\"\\\";\\n  }\\n}\\n\\nfunction fnFetchTransformerType(frm) {\\n  //calling the get_item_variant_based_on_factory\\n  //to get the list of item template available for the\\n  //selected factory\\n\\n  fnXMLDataTab(frm);\\n  //Mapped the factory with its relevant item group\\n  const LD_TRANSFORMER_MAPPING = {\\n    SGBCZ: \\\"DTTHZ2N\\\",\\n    RGB: \\\"RGB\\\",\\n    NEU: \\\"NEU\\\",\\n  };\\n\\n  const GET_ITEM_GROUP = LD_TRANSFORMER_MAPPING[frm.doc.factory];\\n\\n  frappe.call({\\n    method: \\\"get_item_variant_based_on_factory\\\",\\n    args: { factory: GET_ITEM_GROUP },\\n    callback: function (response) {\\n      if (response.message) {\\n        set_field_options(\\\"transformer_type\\\", response.message);\\n      }\\n    },\\n  });\\n}\\n\\nfunction fnUpdateButtonGroup(frm) {\\n  const STATUS = frm.doc.status;\\n  let iButtonLabel = \\\"\\\";\\n  let iButtonFunction = null;\\n\\n  // Determine which button to show based on status\\n  if (STATUS === \\\"Draft\\\" && frm.doc.is_design === 1) {\\n    iButtonLabel = \\\"Create Design\\\";\\n    iButtonFunction = fnCreateDesign;\\n  } else if (STATUS === \\\"Draft\\\" && frm.doc.is_design === 0) {\\n    iButtonLabel = \\\"Create Item\\\";\\n    iButtonFunction = fnCreateItem;\\n  } else if (STATUS === \\\"Calculation Received\\\" && !frm.doc.item) {\\n    iButtonLabel = \\\"Create Item\\\";\\n    iButtonFunction = fnCreateItem;\\n  } else if (STATUS === \\\"Item Created\\\" && frm.doc.item) {\\n    iButtonLabel = \\\"View Item\\\";\\n    iButtonFunction = fnViewItem;\\n  } else if (STATUS === \\\"Item Created\\\" && !frm.doc.item) {\\n    iButtonLabel = \\\"Create Item\\\";\\n    iButtonFunction = fnCreateItem;\\n  }\\n\\n  fnShowButtonGroup(frm, iButtonLabel, iButtonFunction);\\n}\\n\\n// Function to show or hide specific button\\nfunction fnShowButtonGroup(frm, iButtonLabel, iButtonFunction) {\\n  // Clear all custom buttons\\n  frm.clear_custom_buttons();\\n\\n  if (iButtonLabel && iButtonFunction) {\\n    // Add the custom button\\n    const BUTTON = frm.add_custom_button(__(iButtonLabel), function () {\\n      if (!frm.is_dirty()) {\\n        iButtonFunction(frm);\\n      }\\n    });\\n\\n    // Ensure the button is enabled/disabled based on form dirty state\\n    if (frm.is_dirty()) {\\n      $(BUTTON).prop(\\\"disabled\\\", true).css(\\\"pointer-events\\\", \\\"none\\\");\\n    } else {\\n      $(BUTTON).prop(\\\"disabled\\\", false).css(\\\"pointer-events\\\", \\\"auto\\\");\\n    }\\n  }\\n}\\n\\nfunction fnDirectMaterial(frm) {\\n  // To create item without gitra calculation for SGBCZ, direct material cost\\n  // is required, so on draft status with is_design checkbox disable make\\n  // direct material cost mandatory\\n  // and for all other factory make it non mandatory but editable\\n  switch (true) {\\n    case frm.doc.factory === \\\"SGBCZ\\\" &&\\n      !frm.doc.is_design &&\\n      frm.doc.status === \\\"Draft\\\":\\n      frm.set_df_property(\\\"direct_material_cost\\\", \\\"read_only\\\", 0);\\n      frm.set_df_property(\\\"direct_material_cost\\\", \\\"reqd\\\", 1);\\n      break;\\n    case frm.doc.factory === \\\"SGBCZ\\\" &&\\n      frm.doc.is_design &&\\n      frm.doc.status === \\\"Draft\\\":\\n      frm.set_df_property(\\\"direct_material_cost\\\", \\\"read_only\\\", 1);\\n      frm.set_df_property(\\\"direct_material_cost\\\", \\\"reqd\\\", 0);\\n      break;\\n    default:\\n      frm.set_df_property(\\\"direct_material_cost\\\", \\\"read_only\\\", 0);\\n      frm.set_df_property(\\\"direct_material_cost\\\", \\\"reqd\\\", 0);\\n      break;\\n  }\\n}\\n\\nfunction fnCreateItem(frm) {\\n  //the Item will be created if no load and load loss\\n  //guarantee is not empty\\n  if (\\n    frm.doc.no_load_loss_guarantee &&\\n    frm.doc.load_loss_guarantee &&\\n    parseInt(frm.doc.lwa) >= 0 &&\\n    parseInt(frm.doc.lpa) >= 0 &&\\n    !(parseInt(frm.doc.lwa) === 0 && parseInt(frm.doc.lpa) === 0)\\n  ) {\\n    //Start of item creation\\n    frappe.msgprint(__(\\\"The item is being created. Please wait a moment.\\\"));\\n    //Calling the create_item_from_design api\\n    frappe.call({\\n      method: \\\"create_item_from_design\\\",\\n      args: { design: frm.doc.name },\\n      callback: function (response) {\\n        if (response.message) {\\n          //after successfull creation\\n          //an alert message\\n          frappe.show_alert(\\n            { message: __(\\\"Item Created\\\"), indicator: \\\"green\\\" },\\n            5\\n          );\\n          //setting the item field\\n          frm.set_value(\\\"item\\\", response.message.item_code);\\n          frm.set_value(\\\"status\\\", \\\"Item Created\\\");\\n          frm.refresh_fields();\\n          //pdf creation is enabled for\\n          //is design SGBCZ transformer\\n          frm.save().then(() => {\\n            if (frm.doc.is_design === 1) {\\n              frappe.show_progress(\\n                __(\\\"Creating with Pdf..\\\"),\\n                50,\\n                100,\\n                __(\\\"Please wait\\\")\\n              );\\n              //get the languange and separator\\n              //from gitra settings\\n              frappe.call({\\n                method: \\\"frappe.client.get\\\",\\n                args: { doctype: \\\"Gitra Settings\\\" },\\n                callback: function (gitraResponse) {\\n                  if (gitraResponse.message) {\\n                    const LD_DATASHEETLANGUAGES =\\n                      gitraResponse.message.datasheet_languages;\\n                    const LA_LANGUAGES = LD_DATASHEETLANGUAGES.map(\\n                      (lang) => lang.language\\n                    );\\n                    //the filename is generated using the argument\\n                    // im_file_name, which takes a string\\n                    //that includes a placeholder for language.\\n                    // Example:'Datasheet_${l_title}_${frm.doc.name}_{language}'\\n                    // Here, {language} is the placeholder,\\n                    //ensuring the language appears at the end.\\n\\n                    // The design title will be used as the filename.\\n                    let lTitle = frm.doc.title;\\n                    if (lTitle) {\\n                      // Find the position of the first space\\n                      let lSpaceIndex = lTitle.indexOf(\\\" \\\");\\n                      if (lSpaceIndex !== -1) {\\n                        // Remove everything up to the first space\\n                        lTitle = lTitle.substring(lSpaceIndex + 1);\\n                      }\\n                      // Replace slashes with gitra separator\\n                      lTitle = lTitle.replace(\\n                        /\\\\//g,\\n                        gitraResponse.message.naming_separator\\n                      );\\n                    }\\n\\n                    //calling the custom fn_doc_pdf_source_to_target\\n                    //developed inside the framework\\n                    frappe.call({\\n                      method: \\\"pdf_on_submit.api.fn_doc_pdf_source_to_target\\\",\\n                      args: {\\n                        im_source_doc_type: frm.doc.doctype,\\n                        im_source_doc_name: frm.doc.name,\\n                        im_languages: LA_LANGUAGES,\\n                        im_letter_head: \\\"Data Sheet\\\",\\n                        im_target_doc_type: \\\"Item\\\",\\n                        im_target_doc_name: response.message.item_code,\\n                        im_file_name: `Datasheet_${lTitle}_${frm.doc.name}_{language}`,\\n                      },\\n                      callback: function (pdfResponse) {\\n                        if (pdfResponse.message) {\\n                          //update the status\\n                          frappe.hide_progress();\\n                          frm.set_value(\\\"status\\\", \\\"Item Created\\\");\\n                          frm.save().then(() => {\\n                            fnUpdateButtonGroup(frm);\\n                          });\\n                        }\\n                      },\\n                    });\\n                  }\\n                },\\n              });\\n            } else {\\n              fnUpdateButtonGroup(frm);\\n            }\\n          });\\n        } else {\\n          frappe.show_alert(\\n            { message: __(\\\"Error Creating Item\\\"), indicator: \\\"red\\\" },\\n            5\\n          );\\n        }\\n      },\\n    });\\n  } else {\\n    frappe.msgprint(\\n      __(\\n        (!frm.doc.no_load_loss_guarantee ? \\\"No Load Loss Guarantee \\\" : \\\"\\\") +\\n          (!frm.doc.load_loss_guarantee ? \\\"Load Loss Guarantee \\\" : \\\"\\\") +\\n          (!(parseInt(frm.doc.lwa) >= 0) ? \\\"Lwa \\\" : \\\"\\\") +\\n          (!(parseInt(frm.doc.lpa) >= 0) ? \\\"Lpa \\\" : \\\"\\\") +\\n          (parseInt(frm.doc.lwa) === 0 && parseInt(frm.doc.lpa) === 0\\n            ? \\\"Lpa (0) and Lwa (0) \\\"\\n            : \\\"\\\") +\\n          \\\"cannot be empty for creating an item\\\"\\n      )\\n    );\\n  }\\n}\\n\\nfunction fnCreateDesign(frm) {\\n  frm.set_value(\\\"status\\\", \\\"Perform Calculation\\\");\\n  frm.save();\\n}\\n\\nfunction fnViewItem(frm) {\\n  frappe.set_route(\\\"item\\\", frm.doc.item);\\n}\\n\",\n \"view\": \"Form\"\n}","_user_tags":null,"_comments":null,"_assign":null,"_liked_by":null}