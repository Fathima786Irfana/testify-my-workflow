{"name":"7bd14f5a94","creation":"2024-11-20 08:20:37.012967","modified":"2024-11-20 08:20:37.012967","modified_by":"deploymentmaster@lmnas.com","owner":"deploymentmaster@lmnas.com","docstatus":0,"idx":0,"deleted_name":"Item Design Compute Cost Beta","deleted_doctype":"Server Script","restored":0,"new_name":null,"data":"{\n \"allow_guest\": 0,\n \"api_method\": null,\n \"creation\": \"2024-11-20 08:20:26.314991\",\n \"cron_format\": null,\n \"disabled\": 0,\n \"docstatus\": 0,\n \"doctype\": \"Server Script\",\n \"doctype_event\": \"Before Save\",\n \"event_frequency\": \"All\",\n \"idx\": 0,\n \"modified\": \"2024-11-20 08:20:26.314991\",\n \"modified_by\": \"deploymentmaster@lmnas.com\",\n \"module\": null,\n \"name\": \"Item Design Compute Cost Beta\",\n \"owner\": \"deploymentmaster@lmnas.com\",\n \"reference_doctype\": \"Item\",\n \"script\": \"# Change References\\r\\n# Labour Cost value is not calculated in the Total cost (#ISS-2024-00057)\\r\\n## finding a record from the dictionary array\\r\\n## it_dict_array is a dictionary array\\r\\n## i_key the key to searched for\\r\\n## i_value the value to searched for\\r\\ndef fn_find_row_by_key_value(ia_dict_array, i_key, i_value):\\r\\n    for id_row in ia_dict_array:\\r\\n        if id_row.get(i_key) == i_value:\\r\\n            return id_row\\r\\n    return None\\r\\n\\r\\n\\r\\n# Find the the array with\\r\\n# Returns the first record matching the condition\\r\\n# similar to array.find of javascript or READ TABLE of ABAP\\r\\ndef fn_find_dict_with_keys(id_dict_row, ia_dict_array):\\r\\n    ld_predicate = lambda x: int(x.get(\\\"rating\\\")) >= int(\\r\\n        id_dict_row.get(\\\"rating\\\")\\r\\n    ) and int(x.get(\\\"hv\\\", 0)) >= int(id_dict_row.get(\\\"hv_rated_voltage\\\"))\\r\\n    for ia_record in ia_dict_array:\\r\\n        if ld_predicate(ia_record):\\r\\n            return ia_record\\r\\n    return None\\r\\n\\r\\n\\r\\n# Begin of Change EBITDA Report (>> #TASK-2024-00157)\\r\\nif doc.material_cost:\\r\\n\\r\\n    # Get the Gitra Settings\\r\\n    ld_gitra_settings = frappe.get_doc(\\\"Gitra Settings\\\", \\\"Gitra Settings\\\")\\r\\n    # Get the Parent Item Group to validate if it is Transformer or Accessory\\r\\n    l_parent_item_group = frappe.db.get_value(\\r\\n        \\\"Item Group\\\", doc.item_group, [\\\"parent_item_group\\\"]\\r\\n    )\\r\\n\\r\\n    l_labour = 0\\r\\n    l_production_overhead = 0\\r\\n    # This block is only of Transformer Items\\r\\n    # >>commented this line for the issue #ISS-2024-00057\\r\\n    # Because it does not include labor costs in the total cost calculation in the Item Doctype\\r\\n    # if doc.variant_of and l_parent_item_group == \\\"DTTHZ2N\\\"\\r\\n\\r\\n    if (doc.variant_of and l_parent_item_group == \\\"DTTHZ2N\\\") or (\\r\\n        doc.variant_of and doc.item_group == \\\"DTTHZ2N\\\"\\r\\n    ):\\r\\n        # <<ISS-2024-00057\\r\\n        ld_rating_row = fn_find_row_by_key_value(\\r\\n            doc.attributes, \\\"attribute\\\", \\\"Power (kVA)\\\"\\r\\n        )\\r\\n        ld_hv_row = fn_find_row_by_key_value(doc.attributes, \\\"attribute\\\", \\\"HV (kV)\\\")\\r\\n        ld_attributes = {\\r\\n            #'rating': ld_rating_row.attribute_value,\\r\\n            #'hv_rated_voltage': ld_hv_row.attribute_value,\\r\\n            \\\"rating\\\": ld_rating_row.attribute_value,\\r\\n            \\\"hv_rated_voltage\\\": int(\\r\\n                float(ld_hv_row.attribute_value.replace(\\\",\\\", \\\".\\\")) * 1000\\r\\n            ),\\r\\n        }\\r\\n\\r\\n        # Read the production hours record from Gitra Setting labour hours child TABLE\\r\\n        # identify the record higher then than the Design rating and Design hv_rated_voltage\\r\\n        # for ex if Design rating is 900KVA and HV is 10000v\\r\\n        # then the record identified will be Rating(1000) and HV Up to(24000)\\r\\n        ld_design_production_hours = fn_find_dict_with_keys(\\r\\n            ld_attributes, ld_gitra_settings.labour_hours\\r\\n        )\\r\\n        # ld_design_production_hours = {}\\r\\n        # ld_design_production_hours['hours'] = 44\\r\\n\\r\\n        # Compute the labour cost as design production hours * labour rate set in Gitra setting\\r\\n        l_labour = ld_design_production_hours.hours * ld_gitra_settings.labour_rate\\r\\n        l_production_overhead = (\\r\\n            ld_design_production_hours.hours * ld_gitra_settings.production_rate\\r\\n        )\\r\\n\\r\\n    # Note: Labour and Production Overhead will be zero for Accessories\\r\\n    l_cost_of_goods = doc.material_cost + l_labour + l_production_overhead\\r\\n\\r\\n    # Compute sales overhead and administrative overhead.\\r\\n    # These will be computed as percent(from Gitra Settings) of cost of goods obtained above\\r\\n    l_sales_overhead = l_cost_of_goods * ld_gitra_settings.sales_overhead / 100\\r\\n    l_administrative_overhead = (\\r\\n        l_cost_of_goods * ld_gitra_settings.administrative_overhead / 100\\r\\n    )\\r\\n\\r\\n    # Compute total cost\\r\\n    # = cost of goods + sales overhead and administrative overhead\\r\\n    # and round to nearest ten\\r\\n    doc.total_cost = l_cost_of_goods + l_sales_overhead + l_administrative_overhead\\r\\n\",\n \"script_type\": \"DocType Event\"\n}","_user_tags":null,"_comments":null,"_assign":null,"_liked_by":null}