{"name":"d65eb42282","creation":"2024-11-20 11:41:48.971215","modified":"2024-11-20 11:41:48.971215","modified_by":"deploymentmaster@lmnas.com","owner":"deploymentmaster@lmnas.com","docstatus":0,"idx":0,"deleted_name":"Design Compute Cost Beta","deleted_doctype":"Server Script","restored":0,"new_name":null,"data":"{\n \"allow_guest\": 0,\n \"api_method\": null,\n \"creation\": \"2024-11-20 11:41:41.449342\",\n \"cron_format\": null,\n \"disabled\": 0,\n \"docstatus\": 0,\n \"doctype\": \"Server Script\",\n \"doctype_event\": \"Before Save\",\n \"event_frequency\": \"All\",\n \"idx\": 0,\n \"modified\": \"2024-11-20 11:41:41.449342\",\n \"modified_by\": \"deploymentmaster@lmnas.com\",\n \"module\": null,\n \"name\": \"Design Compute Cost Beta\",\n \"owner\": \"deploymentmaster@lmnas.com\",\n \"reference_doctype\": \"Design\",\n \"script\": \"\\\"\\\"\\\"\\n# Find the the array with\\n# Returns the first record matching the condition\\n# similar to array.find of javascript or READ TABLE of ABAP\\n# In earlier, HV Rated VOltage only used for Gitra Calculation\\n# But use either HV rated Voltage or HV1\\n\\\"\\\"\\\"\\n\\n\\ndef fn_find_dict_with_keys(doc, ia_dict_array):\\n    # Include this line for Gitra calculation using hv_rated_voltage or hv1 if available\\n    # Handle the case where hv_rated_voltage might not be present\\n    l_hv_field = \\\"hv_rated_voltage\\\"\\n    if not doc.hv_rated_voltage:\\n        l_hv_field = \\\"hv1\\\"\\n\\n    # lHv = doc.get('hv_rated_voltage') or doc.get('hv1')\\n\\n    # predicate = lambda x: int(x.get('rating')) >= \\\\\\n    # int(doc.get('rating')) and int(x.get('hv', 0)) >= \\\\\\n    # int(doc.get('hv_rated_voltage'))\\n    l_predicate = lambda x: int(x.get(\\\"rating\\\", 0)) >= int(\\n        doc.get(\\\"rating\\\", 0)\\n    ) and int(x.get(\\\"hv\\\", 0)) >= int(doc.get(l_hv_field))\\n    for ia_record in ia_dict_array:\\n        if l_predicate(ia_record):\\n            return ia_record\\n    return None\\n\\n\\nif not doc.labour and doc.direct_material_cost:\\n    # Get the Gitra Settings\\n    ld_gitra_settings = frappe.get_doc(\\\"Gitra Settings\\\", \\\"Gitra Settings\\\")\\n\\n    # Read the production hours record from Gitra Setting labour hours child TABLE\\n    # identify the record higher then than the Design rating and Design hv_rated_voltage\\n    # for ex if Design rating is 900KVA and HV is 10000v\\n    # then the record identified will be Rating(1000) and HV Up to(24000)\\n    ld_design_production_hours = fn_find_dict_with_keys(\\n        doc, ld_gitra_settings.labour_hours\\n    )\\n\\n    # Compute the labour cost as design production hours * labour rate set in Gitra setting\\n    doc.labour = ld_design_production_hours.hours * ld_gitra_settings.labour_rate\\n    doc.production_overhead = (\\n        ld_design_production_hours.hours * ld_gitra_settings.production_rate\\n    )\\n    doc.cost_of_goods = doc.direct_material_cost + doc.labour + doc.production_overhead\\n\\n    # Compute sales overhead and administrative overhead.\\n    # These will be computed as percent(from Gitra Settings) of cost of goods obtained above\\n    doc.sales_overhead = doc.cost_of_goods * ld_gitra_settings.sales_overhead / 100\\n    doc.administrative_overhead = (\\n        doc.cost_of_goods * ld_gitra_settings.administrative_overhead / 100\\n    )\\n\\n    # Compute total cost\\n    # = cost of goods + sales overhead and administrative overhead\\n    # doc.total_cost = round((doc.cost_of_goods + \\\\\\n    #   doc.sales_overhead + doc.administrative_overhead)/10)*10\\n    doc.total_cost = (\\n        doc.cost_of_goods + doc.sales_overhead + doc.administrative_overhead\\n    )\\n\",\n \"script_type\": \"DocType Event\"\n}","_user_tags":null,"_comments":null,"_assign":null,"_liked_by":null}