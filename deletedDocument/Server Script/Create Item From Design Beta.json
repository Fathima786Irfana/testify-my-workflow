{"name":"f298a7e76f","creation":"2024-11-20 08:03:18.002038","modified":"2024-11-20 08:03:18.002038","modified_by":"deploymentmaster@lmnas.com","owner":"deploymentmaster@lmnas.com","docstatus":0,"idx":0,"deleted_name":"Create Item From Design Beta","deleted_doctype":"Server Script","restored":0,"new_name":null,"data":"{\n \"allow_guest\": 0,\n \"api_method\": \"create_item_from_design_beta\",\n \"creation\": \"2024-11-20 08:03:13.005689\",\n \"cron_format\": null,\n \"disabled\": 0,\n \"docstatus\": 0,\n \"doctype\": \"Server Script\",\n \"doctype_event\": \"Before Insert\",\n \"event_frequency\": \"All\",\n \"idx\": 0,\n \"modified\": \"2024-11-20 08:03:13.005689\",\n \"modified_by\": \"deploymentmaster@lmnas.com\",\n \"module\": null,\n \"name\": \"Create Item From Design Beta\",\n \"owner\": \"deploymentmaster@lmnas.com\",\n \"reference_doctype\": null,\n \"script\": \"def fn_get_attribute(i_variant_of, i_attribute, i_attribute_value):\\n    ld_child_doc = frappe.new_doc(\\\"Item Variant Attribute\\\")\\n    ld_child_doc.variant_of = i_variant_of\\n    ld_child_doc.attribute = i_attribute\\n    ld_child_doc.attribute_value = i_attribute_value\\n    return ld_child_doc\\n\\n\\n# Fill basic details of the item\\ndef fn_fill_item_basic_details(i_item, i_item_group, i_variant_of):\\n    i_item.item_group = i_item_group\\n    i_item.include_item_in_manufacturing = 0\\n    i_item.variant_of = i_variant_of\\n    i_item.stock_uom = \\\"PC\\\"\\n    return i_item\\n\\n\\n# Fill item description from template item\\ndef fn_fill_item_description(i_item, i_template_item_code):\\n    ld_template_item = frappe.get_doc(\\\"Item\\\", i_template_item_code)\\n    i_item.description = ld_template_item.description\\n    return i_item\\n\\n\\ndef fn_update_or_append_item_code_format(i_attribute, i_attribute_value):\\n    l_b_found = False\\n\\n    # Iterate directly over the list and update if a match is found\\n    for ld_item in la_item_code_format:\\n        if ld_item[\\\"attribute\\\"] == i_attribute:\\n            # Initially, la_item_code_format captures the default value for the Vector Group,\\n            # as well as defaults for Vector Group LV1 and Vector Group LV2 in case LV2 is absent.\\n            # However, if LV2 is present, we must override the default and \\n            # set the Vector Group to 0.\\n            # Additionally, if LV2 is not present, both Vector Group LV1 and Vector Group LV2\\n            # should be set to 0\\n            if i_attribute_value == 0:\\n                # Update the attribute_value if attribute_value is 0\\n                ld_item[\\\"attribute_value\\\"] = i_attribute_value\\n            l_b_found = True\\n            break\\n\\n    # If no match was found, append the new attribute and value\\n    if not l_b_found:\\n        la_item_code_format.append(\\n            {\\\"attribute\\\": i_attribute, \\\"attribute_value\\\": i_attribute_value}\\n        )\\n\\n\\n# Remove trailing zeros from a number string\\ndef fn_remove_trailing_zeros(i_number_str):\\n    return i_number_str.rstrip(\\\"0\\\").rstrip(\\\".\\\") if \\\".\\\" in i_number_str else i_number_str\\n\\n\\n# Generate item code from its attributes\\ndef fn_get_item_code_from_attributes(id_item):\\n    ld_item_code = id_item.variant_of\\n    # Create a lookup dictionary for item_code_format to access attribute_value by attribute\\n    ld_item_code_format_dict = {\\n        a[\\\"attribute\\\"]: a[\\\"attribute_value\\\"] for a in la_item_code_format\\n    }\\n\\n    for ld_attribute in id_item.attributes:\\n        # Check if the current attribute is present in ld_item_code_format_dict\\n        if ld_attribute.attribute in ld_item_code_format_dict:\\n            # Use the attribute_value from item_code_format\\n            ld_item_code = (\\n                ld_item_code\\n                + \\\"/\\\"\\n                + fn_remove_trailing_zeros(\\n                    str(ld_item_code_format_dict[ld_attribute.attribute])\\n                )\\n            )\\n        else:\\n            # Use the attribute's own attribute_value if not found in item_code_format\\n            ld_item_code = (\\n                ld_item_code\\n                + \\\"/\\\"\\n                + fn_remove_trailing_zeros(str(ld_attribute.attribute_value))\\n            )\\n    return ld_item_code\\n\\n\\n# Define the parameter mapping definitions\\ndef fn_get_parameter_mapping_def():\\n    def lfn_add_param_map(i_attribute, i_designdoc_field, la_param_map_def):\\n        ld_param_map = {\\\"attribute\\\": i_attribute, \\\"designdoc_field\\\": i_designdoc_field}\\n        la_param_map_def.append(ld_param_map)\\n        return la_param_map_def\\n\\n    # Add mappings\\n    la_param_map_def = []\\n    la_param_map_def = lfn_add_param_map(\\\"Power (kVA)\\\", \\\"rating\\\", la_param_map_def)\\n    la_param_map_def = lfn_add_param_map(\\n        \\\"HV (kV)\\\", \\\"hv_rated_voltage\\\", la_param_map_def\\n    )\\n    la_param_map_def = lfn_add_param_map(\\\"HV 1 (kV)\\\", \\\"hv1\\\", la_param_map_def)\\n    la_param_map_def = lfn_add_param_map(\\\"HV 2 (kV)\\\", \\\"hv2\\\", la_param_map_def)\\n    la_param_map_def = lfn_add_param_map(\\\"HV AC (kV)\\\", \\\"ac_phase_hv\\\", la_param_map_def)\\n    la_param_map_def = lfn_add_param_map(\\\"LV (V)\\\", \\\"lv_rated_voltage\\\", la_param_map_def)\\n    la_param_map_def = lfn_add_param_map(\\\"LV 1 (V)\\\", \\\"lv1\\\", la_param_map_def)\\n    la_param_map_def = lfn_add_param_map(\\\"LV 2 (V)\\\", \\\"lv_2\\\", la_param_map_def)\\n    la_param_map_def = lfn_add_param_map(\\n        \\\"Climatic class\\\", \\\"climatic_class\\\", la_param_map_def\\n    )\\n    la_param_map_def = lfn_add_param_map(\\n        \\\"Environmental class\\\", \\\"environmental_class\\\", la_param_map_def\\n    )\\n    la_param_map_def = lfn_add_param_map(\\\"Lpa (dB)\\\", \\\"lpa\\\", la_param_map_def)\\n    la_param_map_def = lfn_add_param_map(\\\"LWA (dB)\\\", \\\"lwa\\\", la_param_map_def)\\n    la_param_map_def = lfn_add_param_map(\\n        \\\"Vector Group\\\", \\\"vector_group\\\", la_param_map_def\\n    )\\n    la_param_map_def = lfn_add_param_map(\\n        \\\"Vector Group LV 1\\\", \\\"vector_group_lv1\\\", la_param_map_def\\n    )\\n    la_param_map_def = lfn_add_param_map(\\n        \\\"Vector Group LV 2\\\", \\\"vector_group_lv2\\\", la_param_map_def\\n    )\\n    la_param_map_def = lfn_add_param_map(\\\"HV LI (kV)\\\", \\\"li_phase_hv\\\", la_param_map_def)\\n    la_param_map_def = lfn_add_param_map(\\n        \\\"Rating LV1 (kVA)\\\", \\\"power_lv1\\\", la_param_map_def\\n    )\\n    la_param_map_def = lfn_add_param_map(\\n        \\\"Rating LV2 (kVA)\\\", \\\"power_lv2\\\", la_param_map_def\\n    )\\n    la_param_map_def = lfn_add_param_map(\\n        \\\"HV Um (kV)\\\", \\\"highest_operation_voltage_hv\\\", la_param_map_def\\n    )\\n    la_param_map_def = lfn_add_param_map(\\n        \\\"Insulation Class\\\", \\\"insulation_class\\\", la_param_map_def\\n    )\\n    la_param_map_def = lfn_add_param_map(\\\"LV AC (kV)\\\", \\\"ac_phase_lv\\\", la_param_map_def)\\n    la_param_map_def = lfn_add_param_map(\\\"LV LI (kV)\\\", \\\"li_phase_lv\\\", la_param_map_def)\\n    la_param_map_def = lfn_add_param_map(\\n        \\\"LV Um (kV)\\\", \\\"highest_operation_voltage_lv\\\", la_param_map_def\\n    )\\n    la_param_map_def = lfn_add_param_map(\\n        \\\"P0 (W)\\\", \\\"no_load_loss_guarantee\\\", la_param_map_def\\n    )\\n    la_param_map_def = lfn_add_param_map(\\n        \\\"Pk (W)\\\", \\\"load_loss_guarantee\\\", la_param_map_def\\n    )\\n    la_param_map_def = lfn_add_param_map(\\n        \\\"Special parameters\\\", \\\"specifics\\\", la_param_map_def\\n    )\\n    la_param_map_def = lfn_add_param_map(\\n        \\\"Tappings - number of tappings (+/-)\\\", \\\"tapping_plus\\\", la_param_map_def\\n    )\\n    la_param_map_def = lfn_add_param_map(\\n        \\\"Tappings - number of tappings (+/-)\\\", \\\"tapping_minus\\\", la_param_map_def\\n    )\\n    la_param_map_def = lfn_add_param_map(\\n        \\\"Tappings - values (%)\\\", \\\"tapping_minus_step\\\", la_param_map_def\\n    )\\n    la_param_map_def = lfn_add_param_map(\\n        \\\"Tappings - values (%)\\\", \\\"tapping_plus_step\\\", la_param_map_def\\n    )\\n    la_param_map_def = lfn_add_param_map(\\n        \\\"Temperature rise (K)\\\", \\\"temperature_rise\\\", la_param_map_def\\n    )\\n    la_param_map_def = lfn_add_param_map(\\n        \\\"Ambient max. temperature (\\u00b0C)\\\", \\\"ambient_max_temperature\\\", la_param_map_def\\n    )\\n    la_param_map_def = lfn_add_param_map(\\\"THDi (%)\\\", \\\"thdi\\\", la_param_map_def)\\n    la_param_map_def = lfn_add_param_map(\\n        \\\"Winding Material\\\", \\\"winding_material\\\", la_param_map_def\\n    )\\n    la_param_map_def = lfn_add_param_map(\\n        \\\"Transformer IP\\\", \\\"ip_protection\\\", la_param_map_def\\n    )\\n    la_param_map_def = lfn_add_param_map(\\\"Type of LV\\\", \\\"type_lv\\\", la_param_map_def)\\n    la_param_map_def = lfn_add_param_map(\\\"Uk (%)\\\", \\\"impedance\\\", la_param_map_def)\\n    la_param_map_def = lfn_add_param_map(\\\"Uk LV 1 (%)\\\", \\\"uk_lv1\\\", la_param_map_def)\\n    la_param_map_def = lfn_add_param_map(\\\"Uk LV 2 (%)\\\", \\\"uk_lv2\\\", la_param_map_def)\\n    la_param_map_def = lfn_add_param_map(\\n        \\\"Electrostatic screen\\\", \\\"electrostatic_screen\\\", la_param_map_def\\n    )\\n    la_param_map_def = lfn_add_param_map(\\n        \\\"Parallel coil\\\", \\\"parallel_coil\\\", la_param_map_def\\n    )\\n    la_param_map_def = lfn_add_param_map(\\\"Cooling\\\", \\\"cooling_method\\\", la_param_map_def)\\n    la_param_map_def = lfn_add_param_map(\\n        \\\"Type of Cooling Medium\\\", \\\"type_cooling\\\", la_param_map_def\\n    )\\n    la_param_map_def = lfn_add_param_map(\\\"Bushings HV\\\", \\\"bushing_hv\\\", la_param_map_def)\\n    la_param_map_def = lfn_add_param_map(\\n        \\\"Temperature Rise Winding (K)\\\", \\\"temperature_rise_winding\\\", la_param_map_def\\n    )\\n    la_param_map_def = lfn_add_param_map(\\n        \\\"Temperature rise Oil (k)\\\", \\\"temperature_rise_oil\\\", la_param_map_def\\n    )\\n    la_param_map_def = lfn_add_param_map(\\\"Uk HV LV 1 (%)\\\", \\\"ukhv_lv1\\\", la_param_map_def)\\n    la_param_map_def = lfn_add_param_map(\\\"Uk HV LV 2 (%)\\\", \\\"ukhv_lv2\\\", la_param_map_def)\\n\\n    return la_param_map_def\\n\\n\\n# Get design document field for a given attribute\\ndef fn_get_design_doc_field(i_attribute, la_parameter_map_def):\\n    for ld_param in la_parameter_map_def:\\n        if ld_param[\\\"attribute\\\"] == i_attribute:\\n            return ld_param[\\\"designdoc_field\\\"]\\n\\n\\n# Append attribute to the item\\ndef fn_append_attribute(i_attribute_name, i_attribute_value):\\n    if i_attribute_name not in la_existing_attributes:\\n        if isinstance(i_attribute_value, (int, float)):\\n            ld_item_new.append(\\n                \\\"attributes\\\",\\n                fn_get_attribute(\\n                    design.transformer_type, i_attribute_name, i_attribute_value\\n                ),\\n            )\\n        else:\\n            ld_item_new.append(\\n                \\\"attributes\\\",\\n                fn_get_attribute(\\n                    design.transformer_type, i_attribute_name, str(i_attribute_value)\\n                ),\\n            )\\n        la_existing_attributes.add(i_attribute_name)\\n\\n\\n# function to convert volt ti kV\\ndef fn_convert_to_kv(i_value):\\n    # Convert value to integer and divide by 1000\\n    l_result = int(i_value) / 1000\\n    # Check if result is a whole number\\n    if l_result.is_integer():\\n        # Return as integer string if whole number\\n        return str(int(l_result))\\n    else:\\n        # Return as string with decimal part if not a whole number\\n        return str(l_result)\\n\\n\\n# Fetch the design details from the request\\nl_design_id = frappe.form_dict.get(\\\"design\\\")\\nld_design = frappe.get_doc(\\\"Design\\\", l_design_id)  # Define design here\\n\\nla_parameter_map_def = fn_get_parameter_mapping_def()\\n\\n# Determine item group and variant based on transformer type\\nif ld_design.factory == \\\"SGBCZ\\\":\\n    item_group = \\\"DTTHZ2N\\\"\\n    variant_of = \\\"DTTHZ2N\\\"\\nelif ld_design.factory == \\\"RGB\\\":\\n    item_group = \\\"RGB\\\"\\n    variant_of = ld_design.transformer_type\\nelif ld_design.factory == \\\"NEU\\\":\\n    item_group = \\\"NEU\\\"\\n    variant_of = ld_design.transformer_type\\nelse:\\n    frappe.response[\\\"message\\\"] = \\\"Unsupported transformer type.\\\"\\n    # frappe.throw('Unsupported transformer type.')\\n\\n# Create a new item document\\nld_item_new = frappe.new_doc(\\\"Item\\\")\\nld_item_new.item_name = ld_design.title\\nld_item_new = fn_fill_item_basic_details(ld_item_new, item_group, variant_of)\\nld_item_new = fn_fill_item_description(ld_item_new, variant_of)\\nld_item_new.standard_rate = ld_design.total_cost\\nld_item_new.design = ld_design.name\\n\\n# initialize an empty array\\nla_item_code_format = []\\n\\n# Initialize a flag to check if either 'lwa' or 'lpa' has been set\\nlwa_set = False\\nlpa_set = False\\n\\n# Append attributes while avoiding duplicates\\nla_existing_attributes = set()\\n\\nla_template_attributes = frappe.get_doc(\\\"Item\\\", ld_design.transformer_type).attributes\\nif not la_template_attributes:\\n    frappe.msgprint(\\\"Template attributes not found\\\")\\n\\nfor ld_attribute in la_template_attributes:\\n    # Retrieve the design document field corresponding to the attribute\\n    ld_designdoc_field = fn_get_design_doc_field(\\n        ld_attribute.attribute, la_parameter_map_def\\n    )\\n\\n    # Retrieve the 'numeric_values' attribute from the database\\n    ld_doc_attr = frappe.db.get_value(\\n        \\\"Item Attribute\\\", ld_attribute.attribute, [\\\"numeric_values\\\"]\\n    )\\n\\n    # Initialize ld_docvalue to 0\\n    ld_docvalue = 0\\n\\n    ld_docAbb = 0\\n\\n    # Get the value from the design document\\n    ld_docvalue_temp = ld_design.get(ld_designdoc_field)\\n\\n    # If the attribute has numeric values\\n    if ld_doc_attr:\\n        # If the corresponding document field has a value captured\\n        if ld_docvalue_temp:\\n            # If the document field is not of type float or int\\n            # (i.e., a non-numeric value or char or string type)\\n            if not (\\n                isinstance(ld_docvalue_temp, float) or isinstance(ld_docvalue_temp, int)\\n            ):\\n                # Convert the char or string value to float\\n                ld_docvalue_temp = float(ld_docvalue_temp)\\n            # If the document field value is a whole number then\\n            # make the type as int to trim the .00s\\n            if ld_docvalue_temp % 1 == 0:\\n                ld_docvalue_temp = int(ld_docvalue_temp)\\n            ld_docvalue = ld_docvalue_temp\\n    else:\\n        # get the abbreviation for the attribute value\\n        ld_doc_abbr = frappe.db.get_value(\\n            \\\"Item Attribute Value\\\",\\n            {\\\"parent\\\": ld_attribute.attribute, \\\"attribute_value\\\": ld_docvalue_temp},\\n            \\\"abbr\\\",\\n        )\\n        if ld_doc_abbr:\\n            la_item_code_format.append(\\n                {\\\"attribute\\\": ld_attribute.attribute, \\\"attribute_value\\\": ld_doc_abbr}\\n            )\\n        ld_docvalue = ld_docvalue_temp\\n\\n    # Conditionally append attributes\\n    if ld_attribute.attribute == \\\"Electrostatic screen\\\":\\n        if ld_design.electrostatic_screen == 0:\\n            ld_item_new.append(\\n                \\\"attributes\\\",\\n                fn_get_attribute(\\n                    ld_design.transformer_type, ld_attribute.attribute, \\\"NO\\\"\\n                ),\\n            )\\n            fn_update_or_append_item_code_format(ld_attribute.attribute, 0)\\n\\n        else:\\n            ld_item_new.append(\\n                \\\"attributes\\\",\\n                fn_get_attribute(\\n                    ld_design.transformer_type, ld_attribute.attribute, \\\"YES\\\"\\n                ),\\n            )\\n            fn_update_or_append_item_code_format(ld_attribute.attribute, 1)\\n\\n    elif ld_attribute.attribute == \\\"Parallel coil\\\":\\n        if ld_design.parallel_coil == 0:\\n            ld_item_new.append(\\n                \\\"attributes\\\",\\n                fn_get_attribute(\\n                    ld_design.transformer_type, ld_attribute.attribute, \\\"NO\\\"\\n                ),\\n            )\\n            fn_update_or_append_item_code_format(ld_attribute.attribute, 0)\\n\\n        else:\\n            ld_item_new.append(\\n                \\\"attributes\\\",\\n                fn_get_attribute(\\n                    ld_design.transformer_type, ld_attribute.attribute, \\\"YES\\\"\\n                ),\\n            )\\n            fn_update_or_append_item_code_format(ld_attribute.attribute, 1)\\n\\n    elif ld_attribute.attribute == \\\"Special parameters\\\":\\n        if ld_design.specifics:\\n            ld_item_new.append(\\n                \\\"attributes\\\",\\n                fn_get_attribute(\\n                    ld_design.transformer_type, ld_attribute.attribute, \\\"YES\\\"\\n                ),\\n            )\\n            ld_item_new.custom_specifics = ld_design.specifics\\n            fn_update_or_append_item_code_format(ld_attribute.attribute, 1)\\n        else:\\n            ld_item_new.append(\\n                \\\"attributes\\\",\\n                fn_get_attribute(\\n                    ld_design.transformer_type, ld_attribute.attribute, \\\"NO\\\"\\n                ),\\n            )\\n            fn_update_or_append_item_code_format(ld_attribute.attribute, 0)\\n\\n    # Tappings - number of tappings (+/-) should take greater value in\\n    # either design's tapping_plus or tapping_minus\\n    elif ld_attribute.attribute == \\\"Tappings - number of tappings (+/-)\\\":\\n        l_tapping_plus = int(ld_design.tapping_plus)\\n        l_tapping_minus = int(ld_design.tapping_minus)\\n\\n        if l_tapping_plus > l_tapping_minus:\\n            ld_item_new.append(\\n                \\\"attributes\\\",\\n                fn_get_attribute(\\n                    ld_design.transformer_type, ld_attribute.attribute, l_tapping_plus\\n                ),\\n            )\\n            fn_update_or_append_item_code_format(ld_attribute.attribute, l_tapping_plus)\\n        else:\\n            ld_item_new.append(\\n                \\\"attributes\\\",\\n                fn_get_attribute(\\n                    ld_design.transformer_type, ld_attribute.attribute, l_tapping_minus\\n                ),\\n            )\\n            fn_update_or_append_item_code_format(\\n                ld_attribute.attribute, l_tapping_minus\\n            )\\n\\n    # if lv_2 has a value then vector group should be 0\\n    # if not vector group lv1 and lv2 should be 0\\n    elif ld_attribute.attribute in [\\n        \\\"Vector Group\\\",\\n        \\\"Vector Group LV 1\\\",\\n        \\\"Vector Group LV 2\\\",\\n    ]:\\n        if ld_attribute.attribute == \\\"Vector Group\\\":\\n            attribute_value = ld_design.vector_group if ld_design.lv_2 == 0 else 0\\n        elif ld_attribute.attribute == \\\"Vector Group LV 1\\\":\\n            attribute_value = ld_design.vector_group_lv1 if ld_design.lv_2 != 0 else 0\\n        elif ld_attribute.attribute == \\\"Vector Group LV 2\\\":\\n            attribute_value = ld_design.vector_group_lv2 if ld_design.lv_2 != 0 else 0\\n        ld_item_new.append(\\n            \\\"attributes\\\",\\n            fn_get_attribute(\\n                ld_design.transformer_type, ld_attribute.attribute, attribute_value\\n            ),\\n        )\\n        fn_update_or_append_item_code_format(ld_attribute.attribute, attribute_value)\\n\\n    elif ld_attribute.attribute in [\\n        \\\"Uk (%)\\\",\\n        \\\"Uk LV 1 (%)\\\",\\n        \\\"Uk LV 2 (%)\\\",\\n        \\\"Uk HV LV 1 (%)\\\",\\n        \\\"Uk HV LV 2 (%)\\\",\\n    ]:\\n        if ld_attribute.attribute == \\\"Uk (%)\\\":\\n            attribute_value = (\\n                ld_design.impedance\\n                if ld_design.uk_lv2 == 0 and ld_design.ukhv_lv2 == 0\\n                else 0\\n            )\\n        elif ld_attribute.attribute == \\\"Uk LV 1 (%)\\\":\\n            attribute_value = ld_design.uk_lv1 if ld_design.uk_lv2 != 0 else 0\\n        elif ld_attribute.attribute == \\\"Uk LV 2 (%)\\\":\\n            attribute_value = ld_design.uk_lv2 if ld_design.uk_lv2 != 0 else 0\\n        elif ld_attribute.attribute == \\\"Uk HV LV 1 (%)\\\":\\n            attribute_value = ld_design.ukhv_lv1 if ld_design.ukhv_lv2 != 0 else 0\\n        elif ld_attribute.attribute == \\\"Uk HV LV 2 (%)\\\":\\n            attribute_value = ld_design.ukhv_lv2 if ld_design.ukhv_lv2 != 0 else 0\\n        ld_item_new.append(\\n            \\\"attributes\\\",\\n            fn_get_attribute(\\n                ld_design.transformer_type, ld_attribute.attribute, attribute_value\\n            ),\\n        )\\n\\n    # Converting HV, HV 1, HV 2 from V to kV\\n    elif ld_attribute.attribute in [\\\"HV (kV)\\\", \\\"HV 1 (kV)\\\", \\\"HV 2 (kV)\\\"]:\\n        hv_value_map = {\\n            \\\"HV (kV)\\\": ld_design.hv_rated_voltage,\\n            \\\"HV 1 (kV)\\\": ld_design.hv1,\\n            \\\"HV 2 (kV)\\\": ld_design.hv2,\\n        }\\n        hv_in_kv_str = fn_convert_to_kv(hv_value_map[ld_attribute.attribute])\\n        ld_item_new.append(\\n            \\\"attributes\\\",\\n            fn_get_attribute(\\n                ld_design.transformer_type, ld_attribute.attribute, hv_in_kv_str\\n            ),\\n        )\\n\\n    else:\\n        ld_item_new.append(\\n            \\\"attributes\\\",\\n            fn_get_attribute(\\n                ld_design.transformer_type, ld_attribute.attribute, ld_docvalue\\n            ),\\n        )\\n\\n# Append other attributes\\nld_item_new.item_technical_name = ld_design.rating + \\\" [kVA]\\\"\\n\\n# update technical name\\nif ld_design.hv_rated_voltage:\\n    hv_in_kv = fn_convert_to_kv(ld_design.hv_rated_voltage).replace(\\\".\\\", \\\",\\\")\\n    ld_item_new.item_technical_name = (\\n        ld_item_new.item_technical_name\\n        + \\\", HV \\\"\\n        + fn_remove_trailing_zeros(hv_in_kv)\\n        + \\\" [kV]\\\"\\n    )\\n\\nif ld_design.hv1 and ld_design.hv2:\\n    hv1_in_kv = fn_convert_to_kv(ld_design.hv1).replace(\\\".\\\", \\\",\\\")\\n    hv2_in_kv = fn_convert_to_kv(ld_design.hv2).replace(\\\".\\\", \\\",\\\")\\n\\n    ld_item_new.item_technical_name = (\\n        ld_item_new.item_technical_name\\n        + \\\", HV\\u2081 \\\"\\n        + fn_remove_trailing_zeros(hv1_in_kv)\\n        + \\\" [kV]\\\"\\n    )\\n    ld_item_new.item_technical_name = (\\n        ld_item_new.item_technical_name\\n        + \\\", HV\\u2082 \\\"\\n        + fn_remove_trailing_zeros(hv2_in_kv)\\n        + \\\" [kV]\\\"\\n    )\\n\\nif ld_design.lv_rated_voltage:\\n    ld_item_new.item_technical_name = (\\n        ld_item_new.item_technical_name\\n        + \\\", LV \\\"\\n        + str(ld_design.lv_rated_voltage)\\n        + \\\" [V]\\\"\\n    )\\n\\nif ld_design.lv1 and ld_design.lv_2:\\n\\n    ld_item_new.item_technical_name = (\\n        ld_item_new.item_technical_name + \\\", LV\\u2081 \\\" + str(ld_design.lv1) + \\\" [V]\\\"\\n    )\\n    ld_item_new.item_technical_name = (\\n        ld_item_new.item_technical_name + \\\", LV\\u2082 \\\" + str(ld_design.lv_2) + \\\" [V]\\\"\\n    )\\n\\nif ld_design.impedance and (ld_design.uk_lv2 == 0 and ld_design.ukhv_lv2 == 0):\\n    ld_item_new.item_technical_name = (\\n        ld_item_new.item_technical_name\\n        + \\\", Uk \\\"\\n        + fn_remove_trailing_zeros(str(ld_design.impedance))\\n        + \\\" [%]\\\"\\n    )\\n\\nif ld_design.uk_lv1 and ld_design.uk_lv2:\\n    ld_item_new.item_technical_name = (\\n        ld_item_new.item_technical_name\\n        + \\\", Uk LV\\u2081 \\\"\\n        + fn_remove_trailing_zeros(str(ld_design.uk_lv1))\\n        + \\\" [%]\\\"\\n    )\\n    ld_item_new.item_technical_name = (\\n        ld_item_new.item_technical_name\\n        + \\\", Uk LV\\u2082 \\\"\\n        + fn_remove_trailing_zeros(str(ld_design.uk_lv2))\\n        + \\\" [%]\\\"\\n    )\\n\\nif ld_design.ukhv_lv1 and ld_design.ukhv_lv2:\\n    ld_item_new.item_technical_name = (\\n        ld_item_new.item_technical_name\\n        + \\\", Uk LV\\u2081 \\\"\\n        + fn_remove_trailing_zeros(str(ld_design.ukhv_lv1))\\n        + \\\" [%]\\\"\\n    )\\n    ld_item_new.item_technical_name = (\\n        ld_item_new.item_technical_name\\n        + \\\", Uk LV\\u2082 \\\"\\n        + fn_remove_trailing_zeros(str(ld_design.ukhv_lv2))\\n        + \\\" [%]\\\"\\n    )\\n\\nif ld_design.power_lv1 and ld_design.power_lv2:\\n    ld_item_new.item_technical_name = (\\n        ld_item_new.item_technical_name\\n        + \\\", Rating LV\\u2081 \\\"\\n        + str(ld_design.power_lv1)\\n        + \\\" [kVA]\\\"\\n    )\\n    ld_item_new.item_technical_name = (\\n        ld_item_new.item_technical_name\\n        + \\\", Rating LV\\u2082 \\\"\\n        + str(ld_design.power_lv2)\\n        + \\\" [kVA]\\\"\\n    )\\n\\n\\nld_item_new.item_technical_name = (\\n    ld_item_new.item_technical_name\\n    + \\\", P(0) \\\"\\n    + str(ld_design.no_load_loss_guarantee)\\n    + \\\" [W]\\\"\\n)\\n\\nld_item_new.item_technical_name = (\\n    ld_item_new.item_technical_name\\n    + \\\", P(k) \\\"\\n    + str(ld_design.load_loss_guarantee)\\n    + \\\" [W]\\\"\\n)\\n\\nld_item_new.item_code = fn_get_item_code_from_attributes(ld_item_new).replace(\\\".\\\", \\\",\\\")\\n\\nld_item_new.insert()\\nfrappe.response[\\\"message\\\"] = ld_item_new\\n\",\n \"script_type\": \"API\"\n}","_user_tags":null,"_comments":null,"_assign":null,"_liked_by":null}