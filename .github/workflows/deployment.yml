name: Auto-Deployment

on:
  push:
    branches:
      - main
      - release
      - hot-fix*
  pull_request:
    types:
      - closed
    branches:
      - pre-*

jobs:
  get-base-branch:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    outputs:
      base: ${{ steps.extract.outputs.base }}
    steps:
      - name: Extract base branch
        id: extract
        run: echo "base=${{ github.event.pull_request.base.ref }}" >> $GITHUB_OUTPUT

  check-running-workflows:
    name: ‚õî Check for running workflows on base branch
    needs: get-base-branch
    runs-on: ubuntu-latest
    outputs:
      is_running: ${{ steps.check.outputs.running }}
    steps:
      - name: Check running workflows on base branch
        id: check
        uses: actions/github-script@v7
        with:
          script: |
            const baseBranch = "${{ needs.get-base-branch.outputs.base }}";
            const currentRunId = context.runId;

            const { data } = await github.rest.actions.listWorkflowRunsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              branch: baseBranch,
              status: 'in_progress',
              per_page: 20
            });

            const otherRuns = data.workflow_runs.filter(run => run.id !== currentRunId);
            core.setOutput("running", otherRuns.length > 0 ? "true" : "false");

  halt-if-running:
    name: üõë Halt if another workflow is running
    needs: check-running-workflows
    runs-on: ubuntu-latest
    if: needs.check-running-workflows.outputs.is_running == 'true'
    steps:
      - run: echo "Workflow already running on base branch. Halting..." && exit 1

  code-quality-check:
    name: üß™ Code Quality Gate
    needs: [halt-if-running]
    runs-on: ubuntu-latest
    outputs:
      passed: ${{ steps.result.outputs.passed }}
    steps:
      - uses: actions/checkout@v4

      - name: Run ESLint
        run: |
          npm ci
          npx eslint . > eslint-report.txt || true
          score=$(cat eslint-report.txt | grep -c "error")
          echo "Quality Score: $((100 - score))"
          if [ $((100 - score)) -lt 80 ]; then
            echo "Code quality below threshold"
            echo "passed=false" >> $GITHUB_OUTPUT
            exit 1
          else
            echo "passed=true" >> $GITHUB_OUTPUT
          fi
        id: result

  deploy-qa:
    name: üöõ Deploy to QA
    needs: code-quality-check
    if: needs.code-quality-check.outputs.passed == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Deploy script
        run: ./scripts/deploy-qa.sh

  lens-ai-tests:
    name: ü§ñ Lens AI Test Pilot
    needs: deploy-qa
    runs-on: ubuntu-latest
    outputs:
      tests_passed: ${{ steps.check.outputs.passed }}
    steps:
      - name: Run test suite
        id: check
        run: |
          echo "Running Lens AI tests..."
          result=$(./scripts/run-lens-tests.sh)
          if [[ "$result" == "PASS" ]]; then
            echo "passed=true" >> $GITHUB_OUTPUT
          else
            echo "passed=false" >> $GITHUB_OUTPUT
            exit 1
          fi

  auto-merge-and-prod:
    name: üîÄ Auto-Merge + Approval + Deploy
    needs: lens-ai-tests
    if: needs.lens-ai-tests.outputs.tests_passed == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Auto-merge pre-* into base
        run: |
          gh pr merge ${{ github.event.pull_request.number }} --admin --merge
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Await manual approval
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ secrets.GITHUB_TOKEN }}
          approvers: ajaykumarpmk
          minimum-approvals: 1
          issue-title: "Deploy to Production"
          issue-body: "Approve this to trigger production deployment."

      - name: Deploy to production
        run: ./scripts/deploy-prod.sh

  revert-on-failure:
    name: ‚ùå Revert pre-* branch if tests fail
    needs: lens-ai-tests
    if: needs.lens-ai-tests.outputs.tests_passed == 'false'
    runs-on: ubuntu-latest
    steps:
      - name: Revert pre-* branch to previous commit
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git checkout ${{ github.head_ref }}
          git reset --hard HEAD~1
          git push origin ${{ github.head_ref }} --force
