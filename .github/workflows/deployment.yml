name: Auto-Deployment

on:
  push:
    branches:
      - main
      - release
      - hot-fix*
  pull_request:
    types:
      - closed
    branches:
      - pre-*

jobs:
  # ✅ Get base branch
  get-base-branch:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    outputs:
      base: ${{ github.event.pull_request.base.ref }}
    steps:
      - name: Get base branch name
        run: echo "Base branch is ${{ github.event.pull_request.base.ref }}"

  # ⛔ Check for running workflows on base branch
  check-running-workflows:
    needs: get-base-branch
    runs-on: ubuntu-latest
    outputs:
      is_running: ${{ steps.check.outputs.running }}
    steps:
      - name: Check running workflows on base branch
        id: check
        uses: actions/github-script@v7
        with:
          script: |
            const baseBranch = "${{ needs.get-base-branch.outputs.base }}";
            const runs = await github.rest.actions.listWorkflowRunsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              branch: baseBranch,
              status: 'in_progress'
            });
            const currentRunId = context.runId;
            const otherRuns = runs.data.workflow_runs.filter(run => run.id !== currentRunId);
            const running = otherRuns.length > 0;
            core.setOutput("running", running ? "true" : "false");

  # 🧪 Code Quality Gate
  code-quality-check:
    needs: check-running-workflows
    if: needs.check-running-workflows.outputs.is_running == 'false'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Run code quality check
        run: |
          SCORE=$(python scripts/lint_score.py)  # Simulate your tool
          echo "Score: $SCORE"
          if (( $(echo "$SCORE < 80" | bc -l) )); then
            echo "Code quality score too low"
            exit 1
          fi

  # 🚛 Deploy to QA
  deploy-to-qa:
    needs: code-quality-check
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to QA
        run: echo "🚛 Deploying to QA..."

  # 🤖 Lens AI Test Pilot
  lens-ai-test:
    needs: deploy-to-qa
    runs-on: ubuntu-latest
    outputs:
      result: ${{ steps.test.outputs.result }}
    steps:
      - name: Run Lens AI CLI test
        id: test
        run: |
          RESULT=$(./scripts/run-lens-ai-tests.sh)
          echo "Test result: $RESULT"
          echo "::set-output name=result::$RESULT"

  # 🔀 Handle Test Results
  handle-test-results:
    needs: lens-ai-test
    if: ${{ needs.lens-ai-test.outputs.result == 'pass' }}
    runs-on: ubuntu-latest
    steps:
      - name: Auto-merge pre-* into base
        run: |
          gh pr merge ${{ github.event.pull_request.number }} --merge --admin
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # ❌ Revert on Fail
  revert-pre-branch:
    needs: lens-ai-test
    if: ${{ needs.lens-ai-test.outputs.result != 'pass' }}
    runs-on: ubuntu-latest
    steps:
      - name: Revert pre-* branch
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          git fetch origin ${{ github.head_ref }}
          git reset --hard HEAD~1
          git push origin HEAD:${{ github.head_ref }} --force
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # ✅ Manual approval after tests
  approval:
    needs: handle-test-results
    if: ${{ success() }}
    runs-on: ubuntu-latest
    steps:
      - uses: trstringer/manual-approval@v1
        with:
          secret: ${{ secrets.GITHUB_TOKEN }}
          approvers: ajaykumarpmk
          minimum-approvals: 1
          issue-title: "✅ Manual approval for production deployment"
          issue-body: "Approve to continue production deployment"

  # 🚀 Deploy to Production
  deploy-to-production:
    needs: approval
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to production
        run: echo "🚀 Deploying to production..."

