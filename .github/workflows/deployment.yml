name: Auto-Deployment

on:
  push:
    branches:
      - main
      - r2
      - hot-fix
      - develop
    paths-ignore: # Avoid triggering on PR merges with specific commit messages
      - '**/cypress/**'  

jobs:
  code_quality_check:

    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[skip ci]')" # Skip if commit message contains [skip ci]

    steps:
      - name: Checkout head branch
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          fetch-depth: 0

      - name: Install dependencies
        run: |
          npm install -g eslint
          pip install pylint

      - name: Lint JavaScript files
        run: |
          set -e
          git diff --name-only --diff-filter=ACMRT HEAD~1 HEAD | grep '.js$' | while IFS= read -r file; do
            output=$(npx eslint --config=./eslint.config.js "$file")
            echo "$output"
            total_errors_warnings=$(echo "$output" | grep -Eo '[0-9]+ (error|warning)' | awk '{sum += $1} END {print sum}')
            if [ "${total_errors_warnings:-0}" -gt 90 ]; then
              echo "Linting problems are not within acceptable range (>90) for file: $file. Failing the job."
              exit 1
            fi
          done || exit 1

      - name: Lint Python files
        run: |
          set -e
          git diff --name-only --diff-filter=ACMRT HEAD~1 HEAD | grep '.py$' | while IFS= read -r file; do
            output=$(pylint "$file")
            echo "$output"
            rating=$(echo "$output" | grep 'rated at' | grep -oE '[0-9]+\.[0-9]+' | head -1)
            if (( $(echo "$rating < 6" | bc -l) )); then
              echo "Linting rating is less than 6 for file: $file. Failing the job."
              exit 1
            fi
          done || exit 1

  quality:
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[skip ci]')" # Skip if commit message contains [skip ci]
    needs: code_quality_check
    env:
      HOST: ${{ vars.QA_HOST }}
      PROTOCOL: ${{ vars.QA_PROTOCOL }}
      CLIENT_SCRIPT_END_POINT: ${{ vars.QA_CLIENT_SCRIPT_END_POINT }}
      SERVER_SCRIPT_END_POINT: ${{ vars.QA_SERVER_SCRIPT_END_POINT }}
      REPORT_END_POINT: ${{ vars.QA_REPORT_END_POINT }}
      KEY: ${{ vars.QA_KEY }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Use Node.js v20.10.0
        uses: actions/setup-node@v2
        with:
          node-version: v20.10.0

      - name: Upload the files
        run: |
          npm i
          npm run upload

  ### Settings > Action > General --  Allow github actions to create and approve pr (to create pr in workflow)

  cypress_test:

    runs-on: ubuntu-latest
    needs: quality

    if: "!contains(github.event.head_commit.message, '[skip ci]')" # Skip if commit message contains [skip ci]
    env:
      USER_NAME: ${{ vars.TEST_USER_NAME }}
      PASSWORD: ${{ vars.TEST_PASSWORD }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          submodules: true # Fetch all submodules recursively

      - name: Read Commit Hash
        id: read_commit_hash
        run: |
          COMMIT_HASH=$(cat ci/commit.txt)
          echo "COMMIT_HASH=${COMMIT_HASH}" >> $GITHUB_ENV

      - name: Initialize and Update Submodule to Specific Commit
        run: |
          git submodule update --init --recursive
          cd testAutomate
          git fetch origin
          git checkout ${{ env.COMMIT_HASH }}
          cd -

      - name: Install Dependencies in Submodule
        working-directory: testAutomate
        run: npm install cypress --save-dev

      - name: Run Cypress Tests in Submodule
        working-directory: testAutomate
        run: npx cypress run --spec "cypress/e2e/*.cy.js" --config-file=./cypress.config.cjs

      - name: Overwrite Cypress Folder in Parent Repo
        run: rsync -a --delete testAutomate/cypress/ cypress/

      - name: Commit and Push Changes to New Branch in Parent Repo
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.name 'Fathima786Irfana'
          git config --global user.email 'fathima.irfana@lmnas.com'
          CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
          BRANCH_NAME=cypress-results-$(date +%Y%m%d%H%M%S)
          git checkout -b $BRANCH_NAME
          git add ./cypress
          git commit -m 'Replace Cypress folder from submodule [skip ci]'
          git push origin $BRANCH_NAME
          echo "Creating pull request from $BRANCH_NAME to $CURRENT_BRANCH"
          gh pr create --base $CURRENT_BRANCH --head $BRANCH_NAME --title "Replace Cypress folder from submodule" --body "This PR includes the Cypress test results from the submodule, replacing the existing Cypress folder."
        continue-on-error: true

      - name: Clean Up GitHub CLI Credentials
        if: always()
        run: |
          rm -f ~/.config/gh/hosts.yml

  wait_for_approval:
    runs-on: ubuntu-latest
    needs: cypress_test
    steps:
      - uses: trstringer/manual-approval@v1
        with:
          secret: ${{ github.TOKEN }}
          approvers: arun-lmnas
          minimum-approvals: 1
          issue-title: "Deploying to the production"
          issue-body: "Please approve or deny the production deployment"

  production:
    runs-on: ubuntu-latest
    needs: wait_for_approval
    env:
      HOST: ${{ vars.PROD_HOST }}
      PROTOCOL: ${{ vars.PROD_PROTOCOL }}
      CLIENT_SCRIPT_END_POINT: ${{ vars.PROD_CLIENT_SCRIPT_END_POINT }}
      SERVER_SCRIPT_END_POINT: ${{ vars.PROD_SERVER_SCRIPT_END_POINT }}
      REPORT_END_POINT: ${{ vars.PROD_REPORT_END_POINT }}
      KEY: ${{ vars.PROD_KEY }}

    steps:
   
      - name: Checkout
        uses: actions/checkout@v2

      - name: Use Node.js v20.10.0
        uses: actions/setup-node@v2
        with:
          node-version: v20.10.0

      - name: Upload the files
        run: |
          npm i
          npm run upload
